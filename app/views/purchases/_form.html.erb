<%= form_with(model: @purchase, remote: true) do |form| %>
  <div id="purchase-app">
    <div class="sale-container">
      <div class="wrap-container">
        <div class="col-right">
          <div class="sale-user d-flex mt-2">
            <div class="mr-auto">
              <i class="fa fa-user-circle-o mr-2"></i>
              Người nhập hàng
            </div>
            <div>
              <%= form.select :purchaser_id, options_for_select(@users.collect{|u| [u.fullname, u.id]}, @purchase.purchaser.present? ? @purchase.purchaser.id : current_user.id), {}, class: "form-control form-control-sm" %>
            </div>
          </div>

          <div class="sale-user d-flex mt-2">
            <div class="mr-auto">

            </div>
            <div class="form-inline">
              <%= form.date_field 'date', class: "form-control form-control-sm" %>
              <%= form.time_field 'time', value: @purchase.time.present? ? @purchase.time.strftime('%H:%M') : Time.now.strftime('%H:%M'), class: "form-control form-control-sm" %>
            </div>
          </div>

          <div class="mt-2">
            <div class="input-group">
              <%= form.select :supplier_id, options_for_select(@suppliers.collect{|u| [u.name, u.id]}, @purchase.supplier.present? ? @purchase.supplier.id : ""), {:prompt => "-- Chọn nhà cung cấp --"}, class: "form-control form-control-sm" %>
              <div class="input-group-append">
                <%= link_to fa_icon("plus"), new_supplier_path(from: 'purchase'), class: "btn btn-outline-success btn-sm", remote: true %>
              </div>
            </div>
          </div>

          <hr style="margin: 0.8rem -10px;">

          <div class="">
            <div>
              <h5>THANH TOÁN</h5>
            </div>

            <div class="d-flex">
              <div class="mr-auto">
                <%= t('activerecord.attributes.purchase.code') %>
              </div>
              <div>
                <%= form.text_field :code, class: "form-control form-control-sm", placeholder: "Mã tự động nếu để trống" %>
              </div>
            </div>

            <hr style="margin: 5px 0;">

            <div class="d-flex">
              <div class="mr-auto">
                <%= t('activerecord.attributes.purchase.status') %>
              </div>
              <div>
                <%= Purchase.human_enum_name(:status, form.object.status) %>
              </div>
            </div>

            <hr style="margin: 5px 0;">

            <div class="d-flex">
              <div class="mr-auto">
                <%= t('activerecord.attributes.purchase.total_price') %>
              </div>
              <div id="total_price">
                0
              </div>
            </div>

            <hr style="margin: 5px 0;">

            <div class="d-flex">
              <div class="mr-auto">
                <%= t('activerecord.attributes.purchase.discount_money') %>
              </div>
              <div>
                <%= form.number_field :discount_money, class: "form-control form-control-sm", oninput: "updatePrice()" %>
              </div>
            </div>

            <hr style="margin: 5px 0;">

            <div class="d-flex">
              <div class="mr-auto">
                <%= t('activerecord.attributes.purchase.paid') %>
              </div>
              <div>
                <%= form.number_field :paid, class: "form-control form-control-sm", oninput: "updatePrice()" %>
              </div>
            </div>

            <hr style="margin: 5px 0;">

            <div class="d-flex">
              <div class="mr-auto">
                <%= t('activerecord.attributes.purchase.dept') %>
              </div>
              <div id="purchase-dept">
                0
              </div>
            </div>

            <hr style="margin: 5px 0;">

            <div>
              <%= form.text_area :note, class: "form-control form-control-sm", placeholder: "Ghi chú" %>
            </div>

          </div>

          <hr style="margin: 0.8rem -10px;">

          <div class="float-right">
            <% if params[:purchase_order_id].present? && !@purchase.new_record? %>
              <%= link_to fa_icon("times", text: "Hủy bỏ"), purchase_path(@purchase), method: :delete, class: "btn btn-secondary btn-lg text-white" %>
            <% else %>
              <%= link_to fa_icon("times", text: "Hủy bỏ"), :back, class: "btn btn-secondary btn-lg text-white" %>
            <% end %>

            <button type="submit" class="btn btn-info btn-lg" name="type" value="save">
              <i class="fa fa-floppy-o fa-lg"></i> <%= @purchase.purchased? ? t(:save) : "Lưu tạm" %>
            </button>

            <% unless @purchase.purchased?  %>
              <button type="submit" class="btn btn-success btn-lg" name="type" value="purchase">
                <i class="fa fa-shopping-cart fa-lg"></i> Thanh toán
              </button>
            <% end %>
          </div>

        </div>
        <div style="height: 100%">
          <div class="product-cart" style="height: 100%">
            <div class="row col purchase-header">
              <div class="purchase-title">
                Nhập hàng
              </div>

              <div class="form col-md-5">
                <div class="input-group">
                  <div class="input-group-prepend">
                      <span class="input-group-text bg-white border-right-0">
                        <i class="fa fa-search"></i>
                      </span>
                  </div>
                  <input type="text" class="form-control form-control-sm border-left-0" placeholder="Nhập mã hoặc tên mặt hàng (F3)" aria-label="Tìm mặt hàng" id="search-product-input" autofocus>
                </div>
              </div>
            </div>

            <div>
              <table class="table table-bordered">
                <thead>
                <th>STT</th>
                <th>Mã hàng hóa</th>
                <th>Tên hàng hóa</th>
                <th>Đơn vị</th>
                <th width="120px">Số lượng</th>
                <th width="150px">Đơn giá</th>
                <th width="150px">Giảm giá</th>
                <th>Thành tiền</th>
                </thead>
                <tbody>
                  <tr id="product_purchase_0" class="product_purchase" style="display: none">
                    <td>
                      <span class="number">0</span>
                      <button type="button" class="close" data-dismiss="alert" aria-label="Close" onclick="removeProduct(this)">
                        <span aria-hidden="true">&times;</span>
                      </button>
                      <%= hidden_field_tag 'purchase[product_purchases_attributes][][product_id]', 0, class: 'input_product_id' %>
                    </td>
                    <td class="code">SP0000</td>
                    <td class="name">Tên hàng hóa</td>
                    <td class="unit"></td>
                    <td class="quantity">
                      <%= number_field_tag 'purchase[product_purchases_attributes][][quantity]', 1, class: "form-control form-control-sm input_quantity", oninput: "updatePrice()" %>
                    </td>
                    <td class="unit_price">
                      <%= number_field_tag 'purchase[product_purchases_attributes][][unit_price]', 0, class: "form-control form-control-sm input_unit_price", oninput: "updatePrice()" %>
                    </td>
                    <td class="discount_money">
                      <%= number_field_tag 'purchase[product_purchases_attributes][][discount_money]', 0, class: "form-control form-control-sm input_discount_money", oninput: "updatePrice()" %>
                    </td>
                    <td style="justify-content: right;" class="total_money">
                      0
                    </td>
                  </tr>

                  <% index = 0 %>
                  <% @purchase.product_purchases.each do |pp| %>
                    <tr id="product_purchase_<%= pp.id %>" class="product_purchase">
                      <td>
                        <span class="number"><%= index+1 %></span>
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close" onclick="removeProduct(this)">
                          <span aria-hidden="true">&times;</span>
                        </button>
                        <%= hidden_field_tag 'purchase[product_purchases_attributes][][product_id]', pp.product_id, class: 'input_product_id' %>
                        <%= hidden_field_tag 'purchase[product_purchases_attributes][][id]', pp.id %>
                      </td>
                      <td class="code">
                        <%= pp.product.code %>
                      </td>
                      <td class="code">
                        <%= pp.product.name %>
                      </td>
                      <td class="unit">
                        <%= pp.product.basic_unit %>
                      </td>
                      <td class="quantity">
                        <%= number_field_tag 'purchase[product_purchases_attributes][][quantity]', pp.quantity, class: "form-control form-control-sm input_quantity", oninput: "updatePrice()" %>
                      </td>
                      <td class="unit_price">
                        <%= number_field_tag 'purchase[product_purchases_attributes][][unit_price]', pp.unit_price, class: "form-control form-control-sm input_unit_price", oninput: "updatePrice()" %>
                      </td>
                      <td class="discount_money">
                        <%= number_field_tag 'purchase[product_purchases_attributes][][discount_money]', pp.discount_money, class: "form-control form-control-sm input_discount_money", oninput: "updatePrice()" %>
                      </td>
                      <td style="justify-content: right;" class="total_money">
                        <%= number_to_currency(pp.final_price, precision: 0, unit: '') %>
                      </td>
                    </tr>
                  <% end if @purchase.product_purchases.present? && @purchase.product_purchases.size > 0 %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <%= form.submit "Save" %>
<% end %>

<% content_for :javascript do %>
  <%= javascript_include_tag 'lib/combobox' %>
<% end %>
<% content_for :stylesheet do %>
  <style>
    .custom-combobox {
      position: relative;
      display: inline-block;
    }
    .custom-combobox-toggle {
      position: absolute;
      top: 0;
      bottom: 0;
      margin-left: -1px;
      padding: 0;
    }
    .custom-combobox-input {
      margin: 0;
      padding: 5px 10px;
    }
  </style>
<% end %>

<script>

    $(document).on('turbolinks:load', function () {
        // Update price every times open this page
        updatePrice();

        $("#search-product-input").autocomplete({
            minLength: 0,
            source: function( request, response ) {
                $.getJSON( "/manage/products.json", {
                    term: extractLast( request.term )
                }, response );
            },
            focus: function() {
                // prevent value inserted on focus
                return false;
            },
            select: function( event, ui ) {
                // Search exist and increase quantity
                let $row = $("#product_purchase_" + ui.item.id);
                if ($row.length !== 0) {
                    let number = parseInt($row.find('.input_quantity').val()) + 1;
                    $row.find('.input_quantity').val(number);
                } else {
                    let clone_tr = $("#product_purchase_0").clone(true);

                    // Edit attribute
                    clone_tr.attr("id", "product_purchase_" + ui.item.id)
                    clone_tr.css("display", "" );

                    $(clone_tr).find('.code').html(ui.item.code);
                    $(clone_tr).find('.name').html(ui.item.name);
                    if (ui.item.basic_unit) {
                        $(clone_tr).find('.unit').html(ui.item.basic_unit);
                    }

                    $(".product_purchase:last").after(clone_tr[0].outerHTML)

                    if (ui.item.cost_price) {
                        $("#" + "product_purchase_" + ui.item.id).find('.input_unit_price').val(ui.item.cost_price)
                    } else {
                        $("#" + "product_purchase_" + ui.item.id).find('.input_unit_price').val(0)
                    }

                    $("#" + "product_purchase_" + ui.item.id).find('.input_product_id').val(ui.item.id)

                    updateSTT();
                }

                updatePrice();

                return false;
            }
        }).autocomplete( "instance" )._renderItem = function( ul, item ) {
            return $( "<li>" )
                .append( "<div>" + item.name +"</div>" )
                .appendTo( ul );
        };

        /**
         * Autocomplete for search supplier
         */
        /*$("#search-supplier-input").autocomplete({
            minLength: 0,
            source: function( request, response ) {
                $.getJSON( "/manage/suppliers.json", {
                    term: extractLast( request.term )
                }, response );
            },
            focus: function() {
                // prevent value inserted on focus
                return false;
            },
            select: function( event, ui ) {
                // Set value for hidden_field
                $("#purchase_supplier_id").val(ui.item.id)

                // Set value
                $("#search-supplier-input").val(ui.item.name)

                // Show delete button
                return false;
            }

        }).autocomplete( "instance" )._renderItem = function( ul, item ) {
            return $( "<li>" )
                .append( "<div>" + item.name +"</div>" )
                .appendTo( ul );
        };*/

        function split( val ) {
            return val.split( /,\s*/ );
        }
        function extractLast( term ) {
            return split( term ).pop();
        }

        $("#purchase_paid").on("keyup change", function () {
            updatePrice();
        })
    })

    function removeProduct(e) {
        $(e).closest('tr').remove();
        updateSTT();

        updatePrice();
    }

    function updateSTT() {
        $('.product_purchase').each(function (index, row) {
            $(row).find(".number").html(index)
        })
    }

    function updatePrice() {
        let total_price = 0;
        $('.product_purchase').each(function (index, row) {
            if (index !== 0) {
                let unit_price = $(row).find(".input_unit_price").val()
                if (unit_price) {
                    unit_price = parseInt(unit_price)
                } else {
                    unit_price = 0
                }

                let quantity = $(row).find(".input_quantity").val()
                if (quantity) {
                    quantity = parseInt(quantity)
                } else {
                    quantity = 0
                }

                let discount = $(row).find(".input_discount_money").val()
                if (discount && parseInt(discount)) {
                    discount = parseInt(discount)
                } else {
                    discount = 0
                }

                let price = quantity * unit_price - discount
                $(row).find(".total_money").html(formatMoney(price, 0, ",", "."))

                total_price += price
            }
        })

        $("#total_price").html(formatMoney(total_price, 0, ",", "."))

        let discount_all = $("#purchase_discount_money").val()
        if (discount_all && parseInt(discount_all)) {
            discount_all = parseInt(discount_all)
        } else {
            discount_all = 0
        }

        let paid = $("#purchase_paid").val()
        if (paid && parseInt(paid)) {
            paid = parseInt(paid)
        } else {
            paid = 0
        }

        $("#purchase-dept").html(formatMoney(paid + discount_all - total_price, 0, ",", "."))
    }

    function formatMoney(amount, decimalCount = 2, decimal = ".", thousands = ",") {
        try {
            decimalCount = Math.abs(decimalCount);
            decimalCount = isNaN(decimalCount) ? 2 : decimalCount;

            const negativeSign = amount < 0 ? "-" : "";

            let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
            let j = (i.length > 3) ? i.length % 3 : 0;

            return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
        } catch (e) {
            console.log(e)
        }
    }
</script>